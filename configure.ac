dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
AC_INIT([cotse], [0.1.0.GIT], [freundt@ga-group.nl])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_HEADERS([src/config.h])
AC_CONFIG_MACRO_DIR([m4])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT([dnl
#### Configuration script for cotse
#### Copyright (C) 2010-2015  Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign parallel-tests dist-xz color-tests])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## the build chain
AC_PROG_CC([icc cc gcc])
SXE_CHECK_CC([gnu11 gnu99])
SXE_CHECK_CFLAGS
AC_C_BIGENDIAN

## check if yuck is globally available
AX_CHECK_YUCK
AX_YUCK_SCMVER([version.mk])
AC_CONFIG_LINKS([GNUmakefile:GNUmakefile])


SXE_CHECK_DFP754
## big barf if dfp754 support isn't there
if test "${sxe_cv_feat_dfp754_literals}" = "no" -o \
	"${sxe_cv_feat_dfp754_cast_flavour}" = "unknown" -o \
	"${sxe_cv_feat_dfp754_arith_flavour}" = "unknown" -o \
	"${sxe_cv_feat_dfp754_literal_flavour}" = "unknown"; then
	AC_MSG_ERROR([
Sorry guys.  This project makes extensive use of DFP754 arithmetics.
If your hardware doesn't support it directly, make sure to instruct
your compiler (via CFLAGS) to emit calls to libdecimal/libbid and
turn on dfp754 extensions.

For the Intel C Compiler for instance this is  -intel-extensions
but it must not be used in conjunction with -std=c99 or -std=c11.

Farewell.
])
fi

AC_CHECK_HEADERS([dfp754.h])
AM_CONDITIONAL([HAVE_DFP754], [test "${ac_cv_header_dfp754_h}" = "yes"])

AC_CHECK_HEADERS([dfp/stdlib.h])
AM_CONDITIONAL([HAVE_DFP_STDLIB], [test "${ac_cv_header_dfp_stdlib_h}" = "yes"])

AC_CHECK_FUNCS([strtod32])
AM_CONDITIONAL([HAVE_STRTOD32], [test "${ac_cv_func_strtod32}" = "yes"])

AC_CHECK_FUNCS([quantized32])
AM_CONDITIONAL([HAVE_QUANTIZED32], [test "${ac_cv_func_quantized32}" = "yes"])

AC_CHECK_FUNCS([scalbnd32])
AM_CONDITIONAL([HAVE_SCALBND32], [test "${ac_cv_func_scalbnd32}" = "yes"])

save_LDFLAGS="${LDFLAGS}"
LDFLAGS="${LDFLAGS} -lm"
AC_CHECK_FUNCS([nand32])
AC_CHECK_FUNCS([isnand32])
LDFLAGS="${save_LDFLAGS}"

## check for matlab
AC_ARG_WITH([matlab], [
AS_HELP_STRING([--with-matlab], [Build matlab contribs, default: no.])],
        [with_matlab="${withval}"], [with_matlab="no"])

## the actual checks
if test "${with_matlab}" = "yes"; then
	SXE_CHECK_MATLAB
	have_matlab="yes"
fi
AM_CONDITIONAL([BUILD_MATCLI], [test "${have_matlab}" = "yes"])

## libtool goddess^Wgoodness
## has to be down here as we're turning -Werror'ing off
LT_INIT
SXE_CHECK_LIBTOOL


AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([build-aux/Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_OUTPUT

echo
echo
echo "Build summary"
echo "============="
echo
echo "Everything will be built"
echo

## configure ends here
dnl configure.ac ends here
